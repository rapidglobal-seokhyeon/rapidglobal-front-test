import Head from "next/head";
import { Inter } from "next/font/google";

import { QueryClient, dehydrate } from "@tanstack/react-query";
import { GetStaticProps } from "next";
import { useGetProduct } from "@/hooks/useGetProduct";

import { useRouter } from "next/router";

import { Pagination } from "@/components/Pagination";
import { Table } from "@/components/Table";
import { Filter } from "@/components/Filter";
import { PRODUCT } from "@/constants/queryKey";

import styles from "@/styles/Home.module.css";
import { ProductListDetailPopUp } from "@/common/Modal/product/list";
import { usePopUpStore } from "@/stores/popup";
import { useState } from "react";
import { fetchUtils } from "@/utils/fetch";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const router = useRouter();
  const { handleToggle } = usePopUpStore();
  const [productId, setProductId] = useState<number>(-1);

  const { data, isPending, isLoading } = useGetProduct();

  if (isPending || !data) return <div>loading</div>;

  const { product, ...pageInfo } = data;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={`${styles.main}
      ${inter.className}`}
      >
        <section>
          <div onClick={() => router.push("/")}>Home</div>

          <Filter
            loading={isLoading}
            filter={[
              { key: "productTitle", label: "상품 이름" },
              { key: "uploadedAt", label: "업로드일자" },
              { key: "price", label: "상품 가격" },
              { key: "viewCount", label: "조회수" },
            ]}
          />

          <Table
            onClickRow={(_, id) => {
              setProductId((prev) => (prev = id));
              handleToggle();
            }}
            header={[
              { key: "title", label: "상품 이름" },
              { key: "uploadedAt", label: "업로드일자" },
              { key: "price", label: "상품 가격" },
              { key: "viewCount", label: "조회수" },
            ]}
            body={product}
          />
          <Pagination {...pageInfo} />
        </section>
      </main>

      <ProductListDetailPopUp productId={productId} />
    </>
  );
}

export const getStaticProps: GetStaticProps = async () => {
  const queryClient = new QueryClient();

  await queryClient.prefetchQuery({
    queryKey: [PRODUCT],
    queryFn: async () =>
      await fetchUtils({
        path: "/product/list?skip=1&take=10&sortList=[]",
      }),
  });

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
};
